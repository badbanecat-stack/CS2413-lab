#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
typedef struct {
    int s1[10000];
    int s2[10000];
    int top1;
    int top2;
} MyQueue;
MyQueue* myQueueCreate() {
    MyQueue* obj = (MyQueue*)malloc(sizeof(MyQueue));
    obj->top1 = -1;
    obj->top2 = -1;
    return obj;
}
void myQueuePush(MyQueue* obj, int x) {
    obj->s1[++obj->top1] = x;
}
int myQueuePop(MyQueue* obj) {
    if(obj->top2 == -1) {
        while(obj->top1 != -1) {
            obj->s2[++obj->top2] = obj->s1[obj->top1--];
        }
    }
    return obj->s2[obj->top2--];
}
int myQueuePeek(MyQueue* obj) {
    if(obj->top2 == -1) {
        while(obj->top1 != -1) {
            obj->s2[++obj->top2] = obj->s1[obj->top1--];
        }
    }
    return obj->s2[obj->top2];
}
bool myQueueEmpty(MyQueue* obj) {
    return obj->top1 == -1 && obj->top2 == -1;
}
void myQueueFree(MyQueue* obj) {
    free(obj);
}
typedef struct {
    int q1[10000];
    int q2[10000];
    int front1, rear1, size1;
    int front2, rear2, size2;
} MyStack;
void enqueue(int arr[], int* rear, int* size, int x) {
    arr[*rear] = x;
    *rear = (*rear + 1) % 10000;
    (*size)++;
}
int dequeue(int arr[], int* front, int* size) {
    int val = arr[*front];
    *front = (*front + 1) % 10000;
    (*size)--;
    return val;
}
int frontValue(int arr[], int front) {
    return arr[front];
}
MyStack* myStackCreate() {
    MyStack* obj = (MyStack*)malloc(sizeof(MyStack));
    obj->front1 = 0;
    obj->rear1 = 0;
    obj->size1 = 0;
    obj->front2 = 0;
    obj->rear2 = 0;
    obj->size2 = 0;
    return obj;
}
void myStackPush(MyStack* obj, int x) {
    enqueue(obj->q2, &obj->rear2, &obj->size2, x);
    while(obj->size1 > 0) {
        enqueue(obj->q2, &obj->rear2, &obj->size2, dequeue(obj->q1, &obj->front1, &obj->size1));
    }
    int tf = obj->front1;
    int tr = obj->rear1;
    int ts = obj->size1;
    obj->front1 = obj->front2;
    obj->rear1 = obj->rear2;
    obj->size1 = obj->size2;
    obj->front2 = tf;
    obj->rear2 = tr;
    obj->size2 = ts;
}
int myStackPop(MyStack* obj) {
    return dequeue(obj->q1, &obj->front1, &obj->size1);
}
int myStackTop(MyStack* obj) {
    return frontValue(obj->q1, obj->front1);
}
bool myStackEmpty(MyStack* obj) {
    return obj->size1 == 0;
}
void myStackFree(MyStack* obj) {
    free(obj);
}
int main() {
    MyQueue* q = myQueueCreate();
    myQueuePush(q, 1);
    myQueuePush(q, 2);
    myQueuePush(q, 3);
    printf("%d\n", myQueuePeek(q));
    printf("%d\n", myQueuePop(q));
    printf("%d\n", myQueuePop(q));
    printf("%d\n", myQueuePop(q));
    printf("%d\n", myQueueEmpty(q));
    myQueueFree(q);
    MyStack* s = myStackCreate();
    myStackPush(s, 1);
    myStackPush(s, 2);
    myStackPush(s, 3);
    printf("%d\n", myStackTop(s));
    printf("%d\n", myStackPop(s));
    printf("%d\n", myStackTop(s));
    printf("%d\n", myStackPop(s));
    printf("%d\n", myStackPop(s));
    printf("%d\n", myStackEmpty(s));
    myStackFree(s);
    return 0;
}
